name: Smart Dashboard CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Job 1: Code Quality & Testing
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm init -y
        npm install --save-dev eslint prettier htmlhint stylelint lighthouse-ci
        
    - name: Lint HTML files
      run: |
        npx htmlhint "**/*.html"
        
    - name: Lint CSS files
      run: |
        npx stylelint "**/*.css"
        
    - name: Lint JavaScript files
      run: |
        npx eslint "**/*.js" --ignore-pattern node_modules/
        
    - name: Check code formatting
      run: |
        npx prettier --check "**/*.{html,css,js,json,md}"

  # Job 2: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif

  # Job 3: Build & Test
  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install --save-dev jest puppeteer @testing-library/jest-dom
        
    - name: Create test directory
      run: mkdir -p tests
      
    - name: Run unit tests
      run: |
        # Add your test commands here
        echo "Running unit tests..."
        # npm test
        
    - name: Run integration tests
      run: |
        # Add your integration test commands here  
        echo "Running integration tests..."
        
    - name: Generate test coverage
      run: |
        # Add coverage commands here
        echo "Generating test coverage..."
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Job 4: Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    name: Performance Test
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli
      
    - name: Run Lighthouse CI
      run: |
        lhci autorun --config=.lighthouserc.json
        
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-results
        path: .lighthouseci

  # Job 5: Deploy to GitHub Pages
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to GitHub Pages
    needs: [build-and-test, performance-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Build project
      run: |
        # Add your build commands here
        echo "Building project..."
        mkdir -p dist
        cp -r * dist/ || true
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        cname: your-domain.com # Optional: Add your custom domain
        
    - name: Create deployment status
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment.id,
            state: 'success',
            environment_url: 'https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}'
          })

  # Job 6: Notification
  notify:
    runs-on: ubuntu-latest
    name: Send Notifications
    needs: [deploy]
    if: always()
    
    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: '✅ Smart Dashboard deployed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Send email notification
      uses: dawidd6/action-send-mail@v3
      if: failure()
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: '❌ Smart Dashboard Build Failed'
        body: 'The Smart Dashboard build has failed. Please check the logs.'
        to: ${{ secrets.EMAIL_TO }}
        from: ${{ secrets.EMAIL_FROM }}

  # Job 7: Release Management
  release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: [deploy]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'release:')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate changelog
      id: changelog
      uses: conventional-changelog/standard-version@v9
      
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.changelog.outputs.tag }}
        release_name: Release ${{ steps.changelog.outputs.tag }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false