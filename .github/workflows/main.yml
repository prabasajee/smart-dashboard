name: Security & Performance Monitor

on:
  push:
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Security Scanning
  security-check:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm install
          else
            echo "No package.json found, skipping npm install"
          fi

      - name: Run npm security audit
        run: |
          if [ -f package.json ]; then
            npm audit --audit-level=moderate
          else
            echo "No package.json found, skipping npm audit"
          fi
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk.sarif
        if: hashFiles('package.json') != ''

      - name: Upload Snyk results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('package.json') != '' && hashFiles('snyk.sarif') != ''
        with:
          sarif_file: snyk.sarif

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Security Summary
        run: |
          echo "## ðŸ”’ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… npm audit completed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Snyk vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Secret detection scan completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the Security tab for detailed results." >> $GITHUB_STEP_SUMMARY

  # Performance Monitoring
  performance-monitor:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: security-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install -g @lhci/cli serve
          if [ -f package.json ]; then
            npm install
          fi

      - name: Build application (if needed)
        run: |
          if [ -f package.json ] && grep -q "build" package.json; then
            npm run build
          else
            echo "No build script found, using source files directly"
          fi

      - name: Start local server
        run: |
          if [ -d "dist" ]; then
            serve dist -l 3000 &
          else
            serve . -l 3000 &
          fi
          sleep 5
          echo "Server started on http://localhost:3000"

      - name: Wait for server to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'

      - name: Create Lighthouse CI config
        run: |
          cat > .lighthouserc.json << 'EOF'
          {
            "ci": {
              "collect": {
                "url": ["http://localhost:3000"],
                "numberOfRuns": 3,
                "settings": {
                  "chromeFlags": "--no-sandbox --disable-dev-shm-usage"
                }
              },
              "assert": {
                "preset": "lighthouse:no-pwa",
                "assertions": {
                  "categories:performance": ["warn", {"minScore": 0.7}],
                  "categories:accessibility": ["warn", {"minScore": 0.8}],
                  "categories:best-practices": ["warn", {"minScore": 0.8}],
                  "categories:seo": ["warn", {"minScore": 0.7}],
                  "first-contentful-paint": ["warn", {"maxNumericValue": 3000}],
                  "largest-contentful-paint": ["warn", {"maxNumericValue": 4000}],
                  "cumulative-layout-shift": ["warn", {"maxNumericValue": 0.15}],
                  "speed-index": ["warn", {"maxNumericValue": 4000}]
                }
              },
              "upload": {
                "target": "filesystem",
                "outputDir": "./lighthouse-results"
              }
            }
          }
          EOF

      - name: Run Lighthouse CI Performance Test
        run: lhci autorun

      - name: Upload Lighthouse Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-performance-results
          path: ./lighthouse-results/

      - name: Performance Summary
        run: |
          echo "## ðŸš€ Performance Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Lighthouse performance audit completed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Core Web Vitals measured" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Accessibility score checked" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… SEO optimization verified" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“Š Download the lighthouse-performance-results artifact for detailed metrics." >> $GITHUB_STEP_SUMMARY

  # Security & Performance Report
  generate-report:
    name: Generate Security & Performance Report
    runs-on: ubuntu-latest
    needs: [security-check, performance-monitor]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create comprehensive report
        run: |
          mkdir -p reports
          cat > reports/security-performance-report.md << 'EOF'
          # ðŸ”’ðŸš€ Security & Performance Report
          
          **Date:** $(date)
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## ðŸ”’ Security Status
          - npm audit: ${{ needs.security-check.result }}
          - Snyk scan: ${{ needs.security-check.result }}
          - Secret detection: ${{ needs.security-check.result }}
          
          ## ðŸš€ Performance Status
          - Lighthouse audit: ${{ needs.performance-monitor.result }}
          - Core Web Vitals: ${{ needs.performance-monitor.result }}
          - Accessibility: ${{ needs.performance-monitor.result }}
          
          ## ðŸ“ˆ Recommendations
          1. Check Security tab for vulnerability details
          2. Download performance artifacts for metrics
          3. Review failed assertions in job logs
          4. Update dependencies regularly
          5. Optimize performance based on Lighthouse suggestions
          
          ## ðŸ”— Quick Links
          - [Security Advisories](../../security)
          - [Actions Results](../../actions)
          - [Repository Settings](../../settings)
          EOF

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: security-performance-report
          path: reports/

      - name: Final Summary
        run: |
          echo "## ðŸ“‹ Final Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| ðŸ”’ Security | ${{ needs.security-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ðŸš€ Performance | ${{ needs.performance-monitor.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… **All scans completed!** Check artifacts for detailed results." >> $GITHUB_STEP_SUMMARY

